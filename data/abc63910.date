{'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'UTF-8', 'COMPUTERNAME': 'TREVORLINK-PC', 'VS140COMNTOOLS': 'G:\\VisualStudio2015\\Common7\\Tools\\', 'USERDOMAIN': 'TREVORLINK-PC', 'PSMODULEPATH': 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'LEIN_JAVA_CMD': 'D:\\Program Files\\Java\\jdk1.8.0_101\\bin\\java.exe', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'D:\\Virtualazitino\\Vbox\\', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3c03', 'PATH': 'E:\\PythonUtil\\Python27(32bit)\\lib\\site-packages\\gtk-2.0\\runtime\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;E:\\Python34\\Lib\\site-packages\\PyQt5;E:\\PythonUtil\\Python27(32bit)\\;E:\\PythonUtil\\Python27(32bit)\\Scripts;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;E:\\Python34\\;E:\\Python34\\Scripts;C:\\Program Files (x86)\\Common Files\\NetSarang;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;C:\\WINDOWS\\system32\\wbem;D:\\Program Files (x86)\\IVT Corporation\\BlueSoleil\\Mobile;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\Program Files\\Git\\cmd;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;D:\\IMSoft\\Skype\\Phone\\;E:\\msys64\\mingw64\\bin;E:\\msys64\\usr\\bin;C:\\Program Files (x86)\\Calibre2\\;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;E:\\Java\\.lein\\bin', 'SYSTEMROOT': 'C:\\WINDOWS', 'PYTHONUNBUFFERED': '1', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'HOMEPATH': '\\Users\\Administrator', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Administrator', 'LOGONSERVER': '\\\\TREVORLINK-PC', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'F:\\PyNetCat\\chapter7', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY', 'ASL.LOG': 'Destination=file', 'MOZ_PLUGIN_PATH': 'D:\\UTILITY\\FOXIT READER\\plugins\\', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\WINDOWS', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'PYCHARM_HOSTED': '1', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Administrator'}